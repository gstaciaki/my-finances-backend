#!/usr/bin/env bash
# https://github.com/nickjj/docker-rails-example/blob/main/run

# The set -o errexit (or the equivalent set -e) instruction in shell script
# is used to enable the error handling option, also known as "exit-on-error" or "errexit mode."
# When this option is enabled, the script will automatically terminate its execution
# (or exit with an error code) if any command in the script returns a non-zero exit code (indicating an error).
# This helps make scripts more robust and secure by ensuring that any unexpected failure
# in a command immediately halts the script's execution.
set -o errexit

# The set -o pipefail option in shell script is used to set the exit status of a pipeline to the value of the last (rightmost)
# command that exits with a non-zero status, or to zero if all commands in the pipeline exit successfully.
#
# Using set -o pipefail can be beneficial when you need to ensure that the entire pipeline
# behaves as expected, and you want to detect and handle failures accurately throughout the pipeline.
set -o pipefail

# Define a variable with default value as exec
# The - is a convention to default values.
# To override
# DC="run --rm" ./run
DC="${DC:-exec}"

# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# Docker functions.
# -----------------------------------------------------------------------------

function dc {
  docker compose "${@}"
}

function ps {
  dc ps "${@}"
}

function up {
  dc up "${@}"
}

function dcr {
  dc run --rm "${@}"
}

function cmd {
  # Run any command you want in the api container
  dc exec api "${@}"
}

# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# Package commands
# -----------------------------------------------------------------------------
function test {
  # Run any command you want in the api container
  dc exec api yarn test "${@}"
}

# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# Git commands
# -----------------------------------------------------------------------------
function git:clean:branchs {
  git branch | grep -v '\*\|master\|main\|develop\|production' | xargs -n 1 git branch -D
}

# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# Sheel commands.
# -----------------------------------------------------------------------------

function shell {
  # Start a shell session in the api container
  cmd bash "${@}"
}

# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# Database commands.
# -----------------------------------------------------------------------------
function psql {
  # Connect to PostgreSQL with psql
  # shellcheck disable=SC1091
  _dc db psql -U postgres "${@}"
}

function help {
  printf "%s <task> [args]\n\nTasks:\n" "${0}"

  compgen -A function | grep -v "^_" | cat -n

  printf "\nExtended help:\n  Each task has comments for general usage\n"
}

# This idea is heavily inspired by: https://github.com/adriancooney/Taskfile
TIMEFORMAT=$'\nTask completed in %3lR'
time "${@:-help}"